

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>JM's Devlog</title>
  <subtitle>🍀</subtitle>
  <updated>2025-06-13T04:35:44+09:00</updated>
  <author>
    <name>Jimin Hong</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 Jimin Hong </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Flutter] BuildContext</title>
    <link href="http://localhost:4000/posts/250613/" rel="alternate" type="text/html" title="[Flutter] BuildContext" />
    <published>2025-06-13T04:09:31+09:00</published>
  
    <updated>2025-06-13T04:09:31+09:00</updated>
  
    <id>http://localhost:4000/posts/250613/</id>
    <content src="http://localhost:4000/posts/250613/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>그동안 Flutter의 GetX에 익숙했는데, GetX에서는 BuildContext 없이도 객체를 불러올 수 있었다(GetX 말고 Provider나 BloC같은 다른 상태관리 패키지에서는 ViewModel을 얻기 위해 BuildContext가 필요하다고 한다). 

그래서인지 BuildContext에 대한 개념이 빈약했던 거 같아, 이번에 이 개념을 자세히 정리하려고 한다.





Flutter 아키텍처 


출처 : 공식문서

Flutter 아키텍처는 Embedder, Engine, Framework 순으로 점점 더 추상화된다.
이 중 Framework 계층은 개발자가 Dart 언어로 Flutter와 상호작용하는 부분인데, 이 안에 Widget Layer가 포함되어 있다.

Widget Layer는...</summary>

  </entry>

  
  <entry>
    <title>[Flutter] GetX로 보는 MVVM (vs MVC)</title>
    <link href="http://localhost:4000/posts/250610/" rel="alternate" type="text/html" title="[Flutter] GetX로 보는 MVVM (vs MVC)" />
    <published>2025-06-10T02:26:12+09:00</published>
  
    <updated>2025-06-11T08:21:38+09:00</updated>
  
    <id>http://localhost:4000/posts/250610/</id>
    <content src="http://localhost:4000/posts/250610/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Flutter" />
    
  

  <summary>오늘은 Flutter에서 많이 사용하는 상태 관리 패키지 중 하나인 GetX를 활용하여, MVVM 패턴과 MVC 패턴을 비교해보려고 한다. 그 전에, 그동안 헷갈리던 MVC 패턴, MVP 패턴, MVVM 패턴을 복습해보자.

MVC vs MVP vs MVVM

우선 두 패턴 모두 M과 V를 가진다. M은 Model, V는 View를 의미한다.


  Model: 데이터의 구조를 정의하고, 데이터를 처리하는 역할을 한다. 예를 들면, 모델 클래스 내부에 fromJson() 메소드를 정의하는 것도 데이터 처리 과정의 일부라고 볼 수 있다.
  View: 위젯 등을 통해 사용자에게 보여지는 UI를 정의한다.


이 Model과 View 사이의 의존성을 어떻게 처리하느냐에 따라 아키텍처 패턴이 달라진다.


...</summary>

  </entry>

  
  <entry>
    <title>벨만포드(Bellman-Ford) 알고리즘</title>
    <link href="http://localhost:4000/posts/250605/" rel="alternate" type="text/html" title="벨만포드(Bellman-Ford) 알고리즘" />
    <published>2025-06-05T02:09:42+09:00</published>
  
    <updated>2025-06-05T02:09:42+09:00</updated>
  
    <id>http://localhost:4000/posts/250605/</id>
    <content src="http://localhost:4000/posts/250605/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="PS" />
    
  

  <summary>벨만포드 알고리즘은 하나의 정점에서 출발해 다른 모든 정점까지의 최단거리를 구하는 알고리즘이다. 다익스트라 알고리즘과 달리, 가중치가 음수일 때도 동작하며, 음의 사이클의 존재 여부도 탐지할 수 있다.



출처: 위키피디아 
벨만포드 알고리즘을 잘 설명해주는 gif인 것 같다.


🧠 과정
d 리스트에는 출발점으로부터 각 노드까지의 최단 거리가 저장된다.

  모든 노드의 거리를 무한대(inf)로 초기화하고, 시작 노드의 인덱스(노드 번호)만 0으로 설정한다.
  모든 노드들을 번호 순서대로 확인하되, 현재 확인 중인 노드의 최단거리가 inf가 아닌 경우에 한해, 그 노드 A와 연결된 모든 노드 B에 대해 d[A] + (A와 B 사이의 거리)가 d[B]보다 작으면 d[B]를 갱신한다.
  2번 과정을...</summary>

  </entry>

  
  <entry>
    <title>[Flutter] 단위 테스트</title>
    <link href="http://localhost:4000/posts/250602/" rel="alternate" type="text/html" title="[Flutter] 단위 테스트" />
    <published>2025-06-02T19:08:28+09:00</published>
  
    <updated>2025-06-03T01:57:47+09:00</updated>
  
    <id>http://localhost:4000/posts/250602/</id>
    <content src="http://localhost:4000/posts/250602/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Flutter" />
    
  

  <summary>Flutter 프로젝트를 시작하기 전에 테스트에 대한 개념을 정리해보기로 했다. 오늘은 단위 테스트(Unit test)에 대해 알아보려고 한다.

테스트의 종류

테스트는 보통 정적 테스트와 동적 테스트로 나뉜다.

정적 테스트
프로그램을 실행하지 않고 테스트하는 기법이다. 실행 없이 개발 산출물(코드나 문서 등)을 분석하기만 한다. 
코드 리뷰나 별도의 정적 테스트 도구를 통해 진행한다.

  Flutter에서는 flutter analyze 명령어를 통해 문법오류, 스타일 위반, 사용되지 않는 코드 등을 찾아낼 수 있다.


동적 테스트
프로그램을 직접 실행해보면서 테스트하는 기법이다. 
Flutter에서 지원하는 동적 테스트로는 단위 테스트, 위젯 테스트, 통합 테스트 가 있다.


  
    단...</summary>

  </entry>

  
  <entry>
    <title>프로세스와 스케줄링 기법</title>
    <link href="http://localhost:4000/posts/250529/" rel="alternate" type="text/html" title="프로세스와 스케줄링 기법" />
    <published>2025-05-28T23:47:22+09:00</published>
  
    <updated>2025-05-28T23:47:22+09:00</updated>
  
    <id>http://localhost:4000/posts/250529/</id>
    <content src="http://localhost:4000/posts/250529/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="CS" />
    
  

  <summary>프로세스와 스레드

프로세스(process)

프로세스는 프로그램이 CPU(프로세서)에서 실행될 수 있도록 메모리에 적재된 상태를 말한다. 각 프로세스는 낮은 주소에서 높은 주소로 올라가는 순서대로, Code, Data, Heap, Stack 영역으로 나뉜다.


  Code 영역: 실행할 프로그램의 코드가 저장된다.
  Data 영역: 프로그램의 전역변수와 정적변수가 저장된다.
  Heap 영역: 사용자의 동적할당에 사용된다. 런타임에 크기가 결정된다(확장 가능). 낮은 주소에서 높은 주소로 올라간다.
  Stack 영역: 지역변수와 매개변수가 저장된다. 컴파일 타임에 크기가 결정되며, 높은 주소에서 낮은 주소로 내려간다(+ 과거에는 영역을 누가 침범하느냐에 따라 heap overflow, stack...</summary>

  </entry>

</feed>


