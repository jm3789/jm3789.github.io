

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Jimin's Github Blog</title>
  <subtitle>안녕하세요</subtitle>
  <updated>2024-11-21T01:29:48+09:00</updated>
  <author>
    <name>Jimin Hong</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 Jimin Hong </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Go 서버에 로컬 MySQL 환경 세팅</title>
    <link href="http://localhost:4000/posts/241121/" rel="alternate" type="text/html" title="Go 서버에 로컬 MySQL 환경 세팅" />
    <published>2024-11-21T01:19:00+09:00</published>
  
    <updated>2024-11-21T01:19:00+09:00</updated>
  
    <id>http://localhost:4000/posts/241121/</id>
    <content src="http://localhost:4000/posts/241121/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>저번 편에서 이어진다.  
이번에는 AWS RDS에 연결되지 않는 상황에서 로컬 MySQL 환경을 설정하고 테스트한 과정을 정리해본다. 처음부터 직접 서버를 세팅하는 상황이 아니다보니, 서버를 다뤄본 경험이 부족한 나로서는 이게 제대로 공부되는 게 맞나 싶기도 하다. 그래도 기록을 남겨본다.



문제 상황

로컬 환경에서 서버를 실행하던 중 transaction is not initialized 오류를 만났다. 아직 데이터베이스와 연결되지 않은 상태에서 발생한 문제로 추정된다.

conf.ini 파일은 다음과 같이 설정되어 있었다.
[DebugDatabase] 
NumberOfDisk = 1 
Type = &amp;quot;mysql&amp;quot; 
User = &amp;quot;admin&amp;quot; 
Password = &amp;quot;안알랴줌&amp;quot; 
Host = &amp;quot;안...</summary>

  </entry>

  
  <entry>
    <title>Go 언어와 서버 실행하기</title>
    <link href="http://localhost:4000/posts/241119/" rel="alternate" type="text/html" title="Go 언어와 서버 실행하기" />
    <published>2024-11-19T00:55:00+09:00</published>
  
    <updated>2024-11-19T00:55:00+09:00</updated>
  
    <id>http://localhost:4000/posts/241119/</id>
    <content src="http://localhost:4000/posts/241119/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>Go 언어란?

Go 언어는 Google에서 개발한 오픈 소스 프로그래밍 언어이다. 간결한 문법을 바탕으로 효율적인 개발이 가능하다.

Go는 절차적 언어이면서도 객체지향 프로그래밍 요소를 일부 포함한다. 전통적인 객체지향 요소인 클래스나 상속이 없다. 대신 구조체와 메소드, 인터페이스를 통해 객체지향 프로그래밍을 지원한다.

구조체(Structs): Go에서는 클래스가 없는 대신 구조체에 메서드를 정의함으로써 객체와 비슷한 구성을 만들 수 있다.

type Person struct {
	Name string
	Age  int
}  

func (p *Person) Greet() string {
	return &amp;quot;Hello, &amp;quot; + p.Name 
}


메소드(Method): Go의 메소드에는 함수명 앞...</summary>

  </entry>

  
  <entry>
    <title>[JS] 백준 1927. 최소 힙</title>
    <link href="http://localhost:4000/posts/241116_1/" rel="alternate" type="text/html" title="[JS] 백준 1927. 최소 힙" />
    <published>2024-11-16T00:15:00+09:00</published>
  
    <updated>2024-11-16T00:15:00+09:00</updated>
  
    <id>http://localhost:4000/posts/241116_1/</id>
    <content src="http://localhost:4000/posts/241116_1/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="PS" />
    
  

  <summary>백준 1927. 최소 힙

힙 (Heap)

힙은 이진 트리의 일종으로, 부모 노드와 자식 노드 간의 특정 관계를 유지하는 자료 구조이다. 힙은 완전 이진 트리 구조를 가지는데, 이는 트리가 항상 왼쪽부터 순차적으로 채워진다는 의미이다. 그래서 트리를 배열로 쉽게 표현하고 관리할 수 있다.

힙에는 두 가지 종류가 있다. 최소 힙과 최대 힙이다.

최소 힙 (Min Heap)

최소 힙은 부모 노드가 자식 노드보다 항상 작은 값을 가지는 완전 이진 트리이다. 최상단의 루트 노드는 항상 트리에서 가장 작은 값을 가진다. 새로운 요소가 추가되면 upheap 과정을 수행하고, 루트에 있던 최솟값이 삭제되면 가장 마지막에 있던 요소를 맨 앞으로 이동시킨 후 downheap 과정을 수행하여 힙의 규칙을 유지한다...</summary>

  </entry>

  
  <entry>
    <title>Obsidian에서 템플릿 활용해 글 작성하기</title>
    <link href="http://localhost:4000/posts/241114_2/" rel="alternate" type="text/html" title="Obsidian에서 템플릿 활용해 글 작성하기" />
    <published>2024-11-14T19:20:00+09:00</published>
  
    <updated>2024-11-14T19:20:00+09:00</updated>
  
    <id>http://localhost:4000/posts/241114_2/</id>
    <content src="http://localhost:4000/posts/241114_2/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Github Blog" />
    
  

  <summary>깃블로그에 포스팅할 때 Obsidian을 활용해 보기로 했다. 직무 특강에서 멘토님이 사용하시는 모습을 보고 매우 편리해 보였기 때문이다.

일단 마크다운 작성이 쉬워서 작성 내용을 직관적으로 미리 볼 수 있었다. 그리고 템플릿 기능 덕분에 메모 버튼을 누르면 현재 날짜와 시간이 자동으로 입력된 양식이 생성되어 깃블로그에 글을 작성할 때 유용할 것 같았다.



1. Obsidian의 Vault 설정

블로그의 _posts 디렉토리를 Obsidian의 Vault로 가져왔다. 처음에는 블로그의 루트 디렉토리를 그대로 Vault로 지정하고 글을 작성했으나 파일의 수가 너무 많아서 복잡해졌다. _posts 디렉토리만 가져와도 잘 동작하는 것 같아서 이렇게 했다.

1.1. 파일명 규칙 문제

포스트가 블로그...</summary>

  </entry>

  
  <entry>
    <title>GitHub.io 블로그에 Chirpy 테마 적용하기</title>
    <link href="http://localhost:4000/posts/241114_1/" rel="alternate" type="text/html" title="GitHub.io 블로그에 Chirpy 테마 적용하기" />
    <published>2024-11-14T19:05:00+09:00</published>
  
    <updated>2024-11-14T19:05:00+09:00</updated>
  
    <id>http://localhost:4000/posts/241114_1/</id>
    <content src="http://localhost:4000/posts/241114_1/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Github Blog" />
    
  

  <summary>블로그 테마는 Chirpy 테마로 하기로 했다. 인기있는 테마기도 하고, 이쁘고 깔끔해보였기 때문이다.

아래는 Chirpy 테마(자꾸 크리스피라고 읽게 된다) 적용 과정과 겪은 문제들을 정리한 내용이다. 반성해야 할 점은 공식 문서 확인을 안하고 진행했다는 점이다.


무턱대고 한 것치곤 돌아가긴 하는데, 조만간 공식 가이드를 참조해서 다시 진행할 생각이다…혹시 읽고 있는 사람이 있다면 따라하지 마시길.

1. Chirpy 테마 다운로드
Chirpy 테마를 적용하기 위해 Chirpy GitHub 저장소에서 zip 파일을 다운로드하고, 압축을 풀었다.

2. Chirpy 파일 복사
기존에 작성했던 Post 파일만 남기고 나머지 파일들을 전부 덮어쓰면 될 거라고 생각했는데, 기존 테마와 충돌이 발생했다....</summary>

  </entry>

</feed>


