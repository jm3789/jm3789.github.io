

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Jimin's Github Blog</title>
  <subtitle>안녕하세요</subtitle>
  <updated>2025-03-28T15:10:16+09:00</updated>
  <author>
    <name>Jimin Hong</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 Jimin Hong </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Python] 가장 긴 증가하는 부분 수열 (LIS)</title>
    <link href="http://localhost:4000/posts/250328/" rel="alternate" type="text/html" title="[Python] 가장 긴 증가하는 부분 수열 (LIS)" />
    <published>2025-03-27T23:44:54+09:00</published>
  
    <updated>2025-03-27T23:44:54+09:00</updated>
  
    <id>http://localhost:4000/posts/250328/</id>
    <content src="http://localhost:4000/posts/250328/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="PS" />
    
  

  <summary>LIS(Longest Increasing Subsequence) 알고리즘

주어진 수열에서 일부 원소를 제거해 순서를 유지한 채 가장 길게 증가하는 부분 수열을 찾는 문제다.
O(N^2) 풀이(DP)와 O(N log N) 풀이(이분 탐색)가 있다.



1️⃣ DP 풀이 (O(N^2))

문제: 백준 11053번

# dp
N = int(input())
dp = [0 for _ in range(N+1)]  
# dp[i]: i번째 원소를 마지막으로 하는 증가하는 부분 수열들 중 가장 긴 것의 길이

A = [0] + list(map(int, input().split()))
for i in range(1, N+1):
    max_num = 0
    for j in range(i):
        if...</summary>

  </entry>

  
  <entry>
    <title>소프트웨어 마에스트로 16기 면접 후기(탈락)</title>
    <link href="http://localhost:4000/posts/250323/" rel="alternate" type="text/html" title="소프트웨어 마에스트로 16기 면접 후기(탈락)" />
    <published>2025-03-23T22:25:41+09:00</published>
  
    <updated>2025-03-28T15:04:54+09:00</updated>
  
    <id>http://localhost:4000/posts/250323/</id>
    <content src="http://localhost:4000/posts/250323/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>운 좋게 소마 최종 면접까지 가게 되었다! 내 머릿속에서 소마의 이미지는 엄청난 실력자 분들이 굉장한 서비스를 만들어내는 곳이었다보니, 내가 최종 면접까지 가게 되었다는 게 믿기지 않았다. 꼭 합격하고 싶었다. 그래서 일주일 정도 열심히 준비했다.

면접 장소 및 일정


  
    위치: 포스트타워마포 (마포대로 89, 서울마포우체국) 7층
  
  
    일시: 3월 23일 (토) 오전 10시 ~ 11시 15분
  
  
    입실: 면접 시작 30분 전부터 대기장 입실 가능
  
  
    준비물: 주민등록증 필수, 물도 챙겨가면 좋다 (면접 중간에 마실 수 있음)
  


면접 시작 전

7층에 도착해서 엘리베이터 문이 열리자마자 바로 앞에 스태프분들이 앉아 계셨다. 이름을 물어보셔서 말...</summary>

  </entry>

  
  <entry>
    <title>배낭 문제 (0/1 Knapsack Problem)</title>
    <link href="http://localhost:4000/posts/250319/" rel="alternate" type="text/html" title="배낭 문제 (0/1 Knapsack Problem)" />
    <published>2025-03-19T17:37:12+09:00</published>
  
    <updated>2025-03-19T17:37:12+09:00</updated>
  
    <id>http://localhost:4000/posts/250319/</id>
    <content src="http://localhost:4000/posts/250319/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="PS" />
    
  

  <summary>코딩 테스트를 치르다가 배낭 같아보이는 문제를 만났지만 손도 못 대고 시험이 끝나버렸다. 배낭 알고리즘을 이해만 하고 넘어갔지, 직접 풀어본 적이 없었던 것 같다. 그래서 문제 몇 개를 직접 풀어보며 복습했다. 회고를 위해 이 글을 작성한다.

배낭 문제란?

배낭 문제(Knapsack Problem)는 다음과 같은 상황을 가정하는 문제이다.


  N개의 물건이 있다.
  각 물건은 특정한 무게(W)와 가치(V)를 가진다.
  최대 K 무게까지 담을 수 있는 배낭이 있다.
  배낭에 담을 수 있는 물건의 조합 중에서 가치의 합이 최대가 되도록 한다.


점화식

일반적으로 점화식은 이러한 형태다.
dp[i][j] = max(dp[i-1][j], dp[i-1][j-w] + v)


2차원 DP로 해결하...</summary>

  </entry>

  
  <entry>
    <title>API 계층별 역할</title>
    <link href="http://localhost:4000/posts/241122/" rel="alternate" type="text/html" title="API 계층별 역할" />
    <published>2024-11-22T00:20:22+09:00</published>
  
    <updated>2025-03-20T19:05:27+09:00</updated>
  
    <id>http://localhost:4000/posts/241122/</id>
    <content src="http://localhost:4000/posts/241122/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>이번 글에서는 병원 문진(question) 목록을 조회하는 API를 수정하는 과정에서 공부한 것들을 기록한다. 라우터-컨트롤러-서비스-레포지토리-DB로 이어지는 구조를 기반으로, 각 계층이 어떤 역할을 했는지 살펴보겠다.



1. 라우터 (Router)

라우터는 클라이언트 요청을 받아서 적절한 컨트롤러로 전달하는 역할을 한다. 병원 문진 조회 API에서는 다음과 같은 경로로 설정했다.

router.GET(&amp;quot;/admin/hospitalQuestion&amp;quot;, adminHospitalController.GetHospitalQuestionList)


라우터는 HTTP GET 메서드를 통해 병원 ID를 쿼리 파라미터로 받아 컨트롤러로 전달한다.



2. 컨트롤러 (Controller)

컨트롤러에서는 라우...</summary>

  </entry>

  
  <entry>
    <title>Go 서버에 로컬 MySQL 환경 세팅</title>
    <link href="http://localhost:4000/posts/241121/" rel="alternate" type="text/html" title="Go 서버에 로컬 MySQL 환경 세팅" />
    <published>2024-11-21T01:19:00+09:00</published>
  
    <updated>2024-11-21T01:42:44+09:00</updated>
  
    <id>http://localhost:4000/posts/241121/</id>
    <content src="http://localhost:4000/posts/241121/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>저번 편에서 이어진다.  
이번에는 AWS RDS에 연결되지 않는 상황에서 로컬 MySQL 환경을 설정하고 테스트한 과정을 정리해본다. 처음부터 직접 서버를 세팅하는 상황이 아니다보니, 서버를 다뤄본 경험이 부족한 나로서는 이게 제대로 공부되는 게 맞나 싶기도 하다. 그래도 기록을 남겨본다.



문제 상황

로컬 환경에서 서버를 실행하던 중 transaction is not initialized 오류를 만났다. 아직 데이터베이스와 연결되지 않은 상태에서 발생한 문제로 추정된다.

conf.ini 파일은 다음과 같이 설정되어 있었다.
[DebugDatabase] 
NumberOfDisk = 1 
Type = &amp;quot;mysql&amp;quot; 
User = &amp;quot;admin&amp;quot; 
Password = &amp;quot;안알랴줌&amp;quot; 
Host = &amp;quot;안...</summary>

  </entry>

</feed>


