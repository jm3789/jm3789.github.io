

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>JM's Devlog</title>
  <subtitle>🍀</subtitle>
  <updated>2025-07-10T01:38:12+09:00</updated>
  <author>
    <name>Jimin Hong</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 Jimin Hong </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>네이버 부스트캠프 10기(Android) 베이직 후기</title>
    <link href="http://localhost:4000/posts/250708/" rel="alternate" type="text/html" title="네이버 부스트캠프 10기(Android) 베이직 후기" />
    <published>2025-07-08T16:19:53+09:00</published>
  
    <updated>2025-07-08T16:19:53+09:00</updated>
  
    <id>http://localhost:4000/posts/250708/</id>
    <content src="http://localhost:4000/posts/250708/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>참여 계기

그동안 Flutter로 앱 개발을 진행했었다. Flutter는 빠른 개발이 가능하다는 장점이 있지만, 크로스플랫폼 프레임워크의 추상화 계층 위에서 동작하다 보니, 시스템 자원을 제어하는 데 한계가 있다고 한다(사실 개발경험이 아직 부족해서 직접적으로 그 한계를 마주친 적은 없지만…그래도 크로스플랫폼을 네이티브 관점에서 이해할 필요성을 느꼈다). 그래서 틈틈이 코틀린 공부를 해왔다. 

근데 코틀린을 혼자 공부하려니 한계가 있었다. 우선 코틀린은 자바 베이스인데 나는 자바도 잘 몰랐다…그리고 특히 함수형 프로그래밍이 굉장히 생소하다고 느꼈다. 그래서 네이티브 개발 공부에 대한 두려움이 있었던 거 같다.

그러던 중 네이버 부스트캠프에서 안드로이드 과정이 있다는 소식을 들었다. 그중 베이직 과...</summary>

  </entry>

  
  <entry>
    <title>내가 보려고 만든 Git 명령어 정리</title>
    <link href="http://localhost:4000/posts/250617/" rel="alternate" type="text/html" title="내가 보려고 만든 Git 명령어 정리" />
    <published>2025-06-17T10:39:43+09:00</published>
  
    <updated>2025-06-17T10:39:43+09:00</updated>
  
    <id>http://localhost:4000/posts/250617/</id>
    <content src="http://localhost:4000/posts/250617/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Memos" />
    
  

  <summary>✅ 로컬에 있는 프로젝트를 비어있는 깃허브 레포지토리에 푸시하기


  git init


프로젝트 디렉토리에서 Git 초기화 


  git remote add origin [원격저장소 주소]


원격 저장소(origin) 등록


  git add .


변경사항 스테이지에 추가


  git commit -m &amp;quot;first commit&amp;quot;


커밋 생성


  git branch -M main


main 브랜치 이름 설정 (필요한 경우)


  git push -u origin main


최초 push (원격 브랜치와 연결)



✅ 원격 레포에 있는 프로젝트 로컬로 가져오기


  git clone [원격 저장소 주소]


해당 원격 레포지토리 전체를 clone해서 새 디렉토리 생성



✅ p...</summary>

  </entry>

  
  <entry>
    <title>[Flutter] BuildContext</title>
    <link href="http://localhost:4000/posts/250613/" rel="alternate" type="text/html" title="[Flutter] BuildContext" />
    <published>2025-06-13T04:09:31+09:00</published>
  
    <updated>2025-06-13T12:11:03+09:00</updated>
  
    <id>http://localhost:4000/posts/250613/</id>
    <content src="http://localhost:4000/posts/250613/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Flutter" />
    
  

  <summary>그동안 Flutter의 GetX에 익숙했는데, GetX에서는 BuildContext 없이도 객체를 불러올 수 있었다(GetX 말고 Provider나 BloC같은 다른 상태관리 패키지에서는 ViewModel을 얻기 위해 BuildContext가 필요하다고 한다). 

그래서인지 BuildContext에 대한 개념이 빈약했던 거 같아, 이번에 이 개념을 자세히 정리하려고 한다.





Flutter 아키텍처 


출처 : 공식문서



Flutter 아키텍처는 Embedder, Engine, Framework 순으로 점점 더 추상화된다.


  Embedder 계층: 각 플랫폼 별 기능들(통신, 사용자입력 등)을 플랫폼별로 구동시킬 수 있도록 하는 레이어다.
Engine 계층: Flutter의 저수준 기...</summary>

  </entry>

  
  <entry>
    <title>[Flutter] GetX로 보는 MVVM (vs MVC)</title>
    <link href="http://localhost:4000/posts/250610/" rel="alternate" type="text/html" title="[Flutter] GetX로 보는 MVVM (vs MVC)" />
    <published>2025-06-10T02:26:12+09:00</published>
  
    <updated>2025-06-11T08:21:38+09:00</updated>
  
    <id>http://localhost:4000/posts/250610/</id>
    <content src="http://localhost:4000/posts/250610/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="Flutter" />
    
  

  <summary>오늘은 Flutter에서 많이 사용하는 상태 관리 패키지 중 하나인 GetX를 활용하여, MVVM 패턴과 MVC 패턴을 비교해보려고 한다. 그 전에, 그동안 헷갈리던 MVC 패턴, MVP 패턴, MVVM 패턴을 복습해보자.

MVC vs MVP vs MVVM

우선 두 패턴 모두 M과 V를 가진다. M은 Model, V는 View를 의미한다.


  Model: 데이터의 구조를 정의하고, 데이터를 처리하는 역할을 한다. 예를 들면, 모델 클래스 내부에 fromJson() 메소드를 정의하는 것도 데이터 처리 과정의 일부라고 볼 수 있다.
  View: 위젯 등을 통해 사용자에게 보여지는 UI를 정의한다.


이 Model과 View 사이의 의존성을 어떻게 처리하느냐에 따라 아키텍처 패턴이 달라진다.


...</summary>

  </entry>

  
  <entry>
    <title>벨만포드(Bellman-Ford) 알고리즘</title>
    <link href="http://localhost:4000/posts/250605/" rel="alternate" type="text/html" title="벨만포드(Bellman-Ford) 알고리즘" />
    <published>2025-06-05T02:09:42+09:00</published>
  
    <updated>2025-06-05T02:09:42+09:00</updated>
  
    <id>http://localhost:4000/posts/250605/</id>
    <content src="http://localhost:4000/posts/250605/" />
    <author>
      <name>Jimin Hong</name>
    </author>

  
    
    <category term="PS" />
    
  

  <summary>벨만포드 알고리즘은 하나의 정점에서 출발해 다른 모든 정점까지의 최단거리를 구하는 알고리즘이다. 다익스트라 알고리즘과 달리, 가중치가 음수일 때도 동작하며, 음의 사이클의 존재 여부도 탐지할 수 있다.



출처: 위키피디아 
벨만포드 알고리즘을 잘 설명해주는 gif인 것 같다.


🧠 과정
d 리스트에는 출발점으로부터 각 노드까지의 최단 거리가 저장된다.

  모든 노드의 거리를 무한대(inf)로 초기화하고, 시작 노드의 인덱스(노드 번호)만 0으로 설정한다.
  모든 노드들을 번호 순서대로 확인하되, 현재 확인 중인 노드의 최단거리가 inf가 아닌 경우에 한해, 그 노드 A와 연결된 모든 노드 B에 대해 d[A] + (A와 B 사이의 거리)가 d[B]보다 작으면 d[B]를 갱신한다.
  2번 과정을...</summary>

  </entry>

</feed>


